// Manipulação Matrizes
#include <stdio.h>
#include <stdlib.h>
#include <stdio_ext.h>
#include <string.h>
#include <ctype.h>
#include <time.h>
#include <math.h>

// FUNÇÃO DE LIMPAR TELA:
void limpa_tela() {
    printf("\033[0m\nAperte \033[0;31mENTER\033[0m para continuar...");
    getchar();
    __fpurge(stdin);
    system("clear");
}

int main(void) {
  int l = 3, c = 4, x, y, i, j, k, op, aux, loop_m = 1, ct_m1 = 0, ct_m2 = 0, excl, temp;
  int mat_1[l][c], mat_2[l][c], mat_3[l][c], vazio = 0;
  char sim_nao;
  for (i = 0; i < l; i++) { // Inicialização das matrizes
    for (j = 0; j < c; j++) {
      mat_1[i][j] = 0;
      mat_2[i][j] = 0;
    }
  }
  
  do { // Loop principal
    do { // Loop de menu
      limpa_tela();
      op = -1;
      printf("=========================================\n");
      printf("MENU");
      printf("\n=========================================");
      printf("\n[1]> Preencher matriz");
      printf("\n[2]> Mostrar matrizes");
      printf("\n[3]> Remover dados de matriz");
      printf("\n[4]> Reordenar matriz");
      printf("\n=========================================\n");
      printf("[0]> Sair");
      printf("\n=========================================\n");
      printf("Digite a opção desejada: ");
      scanf("%d", &op);
      __fpurge(stdin);
      if (op < 0 || op > 4)
        printf("\n[Opção inválida! Tente novamente...]\n");
    } while (op < 0 || op > 4);
    
      if (op == 0) { // Sair
        do {
          limpa_tela();
          printf("\nTem certeza que deseja sair? \n[S/N]: ");
          scanf("%c", &sim_nao);
          __fpurge(stdin);
          if (sim_nao == 'S' || sim_nao == 's') {
            printf("\n[Saindo...]");
            loop_m = 0;
          }
            else if (sim_nao == 'N' || sim_nao == 'n') 
              printf("\n[Retornando ao menu...]");
              else 
                printf("\n[Opção inválida! Tente novamente...]\n"); 
        } while (sim_nao != 'S' && sim_nao != 's' && sim_nao != 'N' && sim_nao != 'n');
      }
        
        else if (op == 1) { // Preencher matriz
          do {
            limpa_tela();
            aux = -1;
            printf("\n=========================================\n");
            printf("Preencher matriz");
            printf("\n=========================================");
            printf("\n[1]> Matriz 1");
            printf("\n[2]> Matriz 2");
            printf("\n=========================================\n");
            printf("[0]> Voltar");
            printf("\n=========================================\n");
            printf("Digite a opção desejada: ");
            scanf("%d", &aux);
            __fpurge(stdin);
            if (aux < 0 || aux > 2)
              printf("\n[Opção inválida! Tente novamente...]\n");
          } while (aux < 0 || aux > 2);
          
          if (aux == 0) { // Voltar
            printf("\n[Voltando ao menu...]\n");
          }
            
            else if (aux == 1) { // Preencher matriz 1
              printf("\n=========================================\n");
              printf("[Matriz 1");
              printf("\n=========================================\n");
              printf("\nDeseja aleatorizar os valores? \n[S/N]: ");
              scanf("%c", &sim_nao);
              __fpurge(stdin);
              printf("\n=========================================");
              for (i = 0; i < l; i++) {
                for (j = 0; j < c; j++) {
                  if (mat_1[i][j] == 0) {
                    if (sim_nao == 'S' || sim_nao == 's') {
                      mat_1[i][j] = rand() % 100 + 1;
                      printf("\nPosição [%d][%d]: %d", i, j, mat_1[i][j]);
                    }
                    else {
                      printf("\n[0] = Não preenchido");
                      printf("\nDigite o valor da posição [%d][%d]: ", i, j);
                      scanf("%d", &mat_1[i][j]);
                      __fpurge(stdin);
                    }
                    if (mat_1[i][j] != 0)
                      ct_m1++;
                  }
                }
              }
              printf("\n=========================================\n");
            }
           
              else if (aux == 2) { // Preencher matriz 2
                printf("\n=========================================\n");
                printf("[Matriz 2");
                printf("\n=========================================\n");
                printf("\nDeseja aleatorizar os valores? \n[S/N]: ");
                scanf("%c", &sim_nao);
                __fpurge(stdin);
                printf("\n=========================================");
                for (i = 0; i < l; i++) {
                  for (j = 0; j < c; j++) {
                    if (mat_2[i][j] == 0) {
                      if (sim_nao == 'S' || sim_nao == 's') {
                        mat_2[i][j] = rand() % 100 + 1;
                        printf("\nPosição [%d][%d]: %d", i, j, mat_2[i][j]);
                      }
                      else {
                        printf("\n[0] = Não preenchido");
                        printf("\nDigite o valor da posição [%d][%d]: ", i, j);
                        scanf("%d", &mat_2[i][j]);
                        __fpurge(stdin);
                      }
                      if (mat_2[i][j] != 0)
                        ct_m2++;
                    }
                  }
                }
                printf("\n=========================================\n");
              }
        }
        
          else if (op == 2) { // Mostrar matrizes
            do {
              limpa_tela();
              aux = -1;
              printf("\n=========================================\n");
              printf("Mostrar matrizes");
              printf("\n=========================================\n");
              printf("[1]> Matriz 1");
              printf("\n[2]> Matriz 2");
              printf("\n=========================================\n");
              printf("[0]> Voltar");
              printf("\n=========================================\n");
              printf("Digite a opção desejada: ");
              scanf("%d", &aux);
              __fpurge(stdin);
              if (aux < 0 || aux > 2)
                printf("\n[Opção inválida! Tente novamente...]\n");
            } while (aux < 0 || aux > 2);
            
            if (aux == 0) { // Voltar
                printf("\n[Voltando ao menu...]\n");
            }
              
              else if (aux == 1) { // Mostrar matriz 1
                printf("\n=========================================\n");
                printf("[Matriz 1");
                printf("\n-----------------------------------------");
                vazio = 0;
                for (i = 0; i < l; i++) {
                  for (j = 0; j < c; j++) {
                    if (mat_1[i][j] != 0) {
                      printf("\nPosição [%d][%d]: %d", i, j, mat_1[i][j]);
                      vazio = 1;
                    }
                  }
                }
                if (vazio == 0) 
                  printf("\n[Matriz vazia!]");
                printf("\n=========================================\n");
              }
            
                else if (aux == 2) { // Mostrar matriz 2
                  printf("\n=========================================\n");
                  printf("[Matriz 2");
                  printf("\n-----------------------------------------");
                  vazio = 0;
                  for (i = 0; i < l; i++) {
                    for (j = 0; j < c; j++) {
                      if (mat_2[i][j] != 0) {
                        printf("\nPosição [%d][%d]: %d", i, j, mat_2[i][j]);
                        vazio = 1;
                      }
                    }
                  }
                  if (vazio == 0) 
                    printf("\n[Matriz vazia!]");
                  printf("\n=========================================\n");
                }
          }
      
            else if (op == 3) { // Remover dados de matriz
              do {
                limpa_tela();
                aux = -1;
                printf("\n=========================================\n");
                printf("Remover dados de matriz");
                printf("\n=========================================");
                printf("\n[1]> Matriz 1");
                printf("\n[2]> Matriz 2");
                printf("\n=========================================\n");
                printf("[0]> Voltar");
                printf("\n=========================================\n");
                printf("Digite a opção desejada: ");
                scanf("%d", &aux);
                __fpurge(stdin);
                if (aux < 0 || aux > 2)
                  printf("\n[Opção inválida! Tente novamente...]\n");
              } while (aux < 0 || aux > 2);
              
              if (aux == 0) { // Voltar
                printf("\n[Voltando ao menu...]\n");
              }
                
                else if (aux == 1) { // Remover dados da matriz 1
                  do {
                    limpa_tela();
                    x = -1;
                    y = -1;
                    printf("\n=========================================\n");
                    printf("[Matriz 1");
                    printf("\n-----------------------------------------");
                    vazio = 0;
                    for (i = 0; i < l; i++) {
                      for (j = 0; j < c; j++) {
                        if (mat_1[i][j] != 0) {
                          printf("\nPosição [%d][%d]: %d", i, j, mat_1[i][j]);
                          vazio = 1;
                        }
                      }
                    }
                    if (vazio == 0)
                      printf("\n[Matriz vazia!]");
                    printf("\n=========================================\n");
                    printf("\nEscolha a posição que deseja remover:\n");
                    printf("[Linha]: ");
                    scanf("%d", &x);
                    __fpurge(stdin);
                    printf("[Coluna]: ");
                    scanf("%d", &y);
                    __fpurge(stdin);
                    printf("\n=========================================\n");
                    if (x < 0 || x > 2 || y < 0 || y > 3)
                      printf("\n[Posição inválida! Tente novamente...]\n");
                  } while (x < 0 || x > 2 || y < 0 || y > 3);  
                  if (mat_1[x][y] != 0) {
                    excl = mat_1[x][y];
                    for (i = x; i < l; i++) { // Loop para remover a posição escolhida e reordenar a matriz
                      for (j = y; j < c; j++) {
                        if (j + 1 != c) // Verifica se a posição a ser movida é a última da linha
                          mat_1[i][j] = mat_1[i][j+1];
                          else if (i + 1 != l) // Verifica se a posição a ser movida é a última da coluna
                            mat_1[i][j] = mat_1[i+1][c - 1 - j];
                            else if (j + 1 == c && i + 1 == l) // Verifica se a posição a ser movida é a última da matriz
                              mat_1[i][j] = 0;
                      }
                    }
                    ct_m1--;
                    printf("\n[Posição [%d][%d]: {%d} removida com sucesso!]\n", x, y, excl);
                  }
                    else
                      printf("\n[Posição vazia! Voltando ao menu...]\n");
                }
                  
                  else if (aux == 2) { // Remover dados da matriz 2
                    do {
                        limpa_tela();
                        x = -1;
                        y = -1;
                        printf("\n=========================================\n");
                        printf("[Matriz 2");
                        printf("\n-----------------------------------------");
                        vazio = 0;
                        for (i = 0; i < l; i++) {
                          for (j = 0; j < c; j++) {
                            if (mat_1[i][j] != 0) {
                              printf("\nPosição [%d][%d]: %d", i, j, mat_2[i][j]);
                              vazio = 1;
                            }
                          }
                        }
                        if (vazio == 0)
                          printf("\n[Matriz vazia!]");
                        printf("\n=========================================\n");
                        printf("\nEscolha a posição que deseja remover:\n");
                        printf("[Linha]: ");
                        scanf("%d", &x);
                        __fpurge(stdin);
                        printf("[Coluna]: ");
                        scanf("%d", &y);
                        __fpurge(stdin);
                        printf("=========================================\n");
                        if (x < 0 || x > 2 || y < 0 || y > 3)
                          printf("\n[Posição inválida! Tente novamente...]\n");
                      } while (x < 0 || x > 2 || y < 0 || y > 3);
                      if (mat_2[x][y] != 0) {
                        excl = mat_2[x][y];
                        for (i = x; i < l; i++) { // Loop para remover a posição escolhida e reordenar a matriz
                          for (j = y; j < c; j++) {
                            if (j + 1 != c) // Verifica se a posição a ser movida é a última da linha
                              mat_2[i][j] = mat_2[i][j+1];
                              else if (i + 1 != l) // Verifica se a posição a ser movida é a última da coluna
                                mat_2[i][j] = mat_2[i+1][c - 1 - j];
                                else if (j + 1 == c && i + 1 == l) // Verifica se a posição a ser movida é a última da matriz
                                  mat_2[i][j] = 0;
                          }
                        }
                        ct_m2--;
                        printf("\n[Posição [%d][%d]: {%d} removida com sucesso!]\n", x, y, excl);
                      }
                        else
                          printf("\n[Posição vazia! Voltando ao menu...]\n");
                  }                   
            }
      
              else if (op == 4) { // Reordenar matriz
                do {
                  limpa_tela();
                  aux = -1;
                  printf("\n=========================================\n");
                  printf("Reordenar matriz");
                  printf("\n=========================================");
                  printf("\n[1]> Crescente");
                  printf("\n[2]> Decrescente");
                  printf("\n=========================================\n");
                  printf("[0]> Voltar");
                  printf("\n=========================================\n");
                  printf("Digite a opção desejada: ");
                  scanf("%d", &aux);
                  __fpurge(stdin);
                  if (aux < 0 || aux > 2)
                    printf("\n[Opção inválida! Tente novamente...]\n");
                } while (aux < 0 || aux > 2);
                
                if (aux == 0) { // Voltar
                    printf("\n[Voltando ao menu...]\n");
                }
                
                    if (aux == 1) { // Reordenar matriz 1
                      do {
                        limpa_tela();
                        aux = -1;
                        printf("\n=========================================\n");
                        printf("Reordenar em ordem crescente");
                        printf("\n=========================================");
                        printf("\n[1]> Matriz 1");
                        printf("\n[2]> Matriz 2");
                        printf("\n=========================================\n");
                        printf("[0]> Voltar");
                        printf("\n=========================================\n");
                        printf("Digite a opção desejada: ");
                        scanf("%d", &aux);
                        __fpurge(stdin);
                        if (aux < 0 || aux > 2)
                          printf("\n[Opção inválida! Tente novamente...]\n");
                      } while (aux < 0 || aux > 2);
                      
                      if (aux == 0) { // Voltar
                          printf("\n[Voltando ao menu...]\n");
                      }
                        
                        else if (aux == 1) { // Reordenar matriz 1 em ordem crescente
                          for (k = 0; k < l*c; k++) {
                            for (i = 0; i < l; i++) { 
                              for (j = 0; j < c; j++) {
                                if (j + 1 != c && mat_1[i][j] > mat_1[i][j+1]) {
                                  temp = mat_1[i][j];
                                  mat_1[i][j] = mat_1[i][j+1];
                                  mat_1[i][j+1] = temp;
                                }
                                  else if (i + 1 != l && mat_1[i][j] > mat_1[i+1][c - 1 - j]) {
                                    temp = mat_1[i][j];
                                    mat_1[i][j] = mat_1[i+1][c - 1 - j];
                                    mat_1[i+1][c - 1 - j] = temp;
                                  }
                              }
                            }
                          }
                          printf("\n=========================================\n");
                          printf("[Matriz 1 reordenada com sucesso!]");
                          printf("\n-----------------------------------------");
                          vazio = 0;
                          for (i = 0; i < l; i++) {
                            for (j = 0; j < c; j++) {
                              if (mat_1[i][j] != 0) {
                                printf("\nPosição [%d][%d]: %d", i, j, mat_1[i][j]);
                                vazio = 1;
                              }
                            }
                          }
                          if (vazio == 0)
                            printf("\n[Matriz vazia!]");
                          printf("\n=========================================\n");
                        }
                          
                          else if (aux == 2) { // Reordenar matriz 2 em ordem crescente
                            for (k = 0; k < l*c; k++) {
                              for (i = 0; i < l; i++) { 
                                for (j = 0; j < c; j++) {
                                  if (j + 1 != c && mat_2[i][j] > mat_2[i][j+1]) {
                                    temp = mat_2[i][j];
                                    mat_2[i][j] = mat_2[i][j+1];
                                    mat_2[i][j+1] = temp;
                                  }
                                    else if (i + 1 != l && mat_2[i][j] > mat_2[i+1][c - 1 - j]) {
                                      temp = mat_2[i][j];
                                      mat_2[i][j] = mat_2[i+1][c - 1 - j];
                                      mat_2[i+1][c - 1 - j] = temp;
                                    }
                                }
                              }
                            }
                            printf("\n=========================================\n");
                            printf("[Matriz 2 reordenada com sucesso!]");
                            printf("\n-----------------------------------------");
                            vazio = 0;
                            for (i = 0; i < l; i++) {
                              for (j = 0; j < c; j++) {
                                if (mat_2[i][j] != 0) {
                                  printf("\nPosição [%d][%d]: %d", i, j, mat_2[i][j]);
                                  vazio = 1;
                                }
                              }
                            }
                            printf("\n=========================================\n");
                          }
                    }
                      
                      else if (aux == 2) { // Reordenar matriz 2
                        do {
                            limpa_tela();
                            aux = -1;
                            printf("\n=========================================\n");
                            printf("Reordenar em ordem decrescente");
                            printf("\n=========================================");
                            printf("\n[1]> Matriz 1");
                            printf("\n[2]> Matriz 2");
                            printf("\n=========================================\n");
                            printf("[0]> Voltar");
                            printf("\n=========================================\n");
                            printf("Digite a opção desejada: ");
                            scanf("%d", &aux);
                            __fpurge(stdin);
                            if (aux < 0 || aux > 2)
                              printf("\n[Opção inválida! Tente novamente...]\n");
                          } while (aux < 0 || aux > 2);
                        
                          if (aux == 0) { // Voltar
                              printf("\n[Voltando ao menu...]\n");
                          }
                            
                            else if (aux == 1) { // Reordenar matriz 1 em ordem decrescente
                              for (k = 0; k < l*c; k++) {
                                for (i = 0; i < l; i++) { 
                                  for (j = 0; j < c; j++) {
                                    if (j + 1 != c && mat_1[i][j] < mat_1[i][j+1]) {
                                      temp = mat_1[i][j];
                                      mat_1[i][j] = mat_1[i][j+1];
                                      mat_1[i][j+1] = temp;
                                    }
                                      else if (i + 1 != l && mat_1[i][j] < mat_1[i+1][c - 1 - j]) {
                                        temp = mat_1[i][j];
                                        mat_1[i][j] = mat_1[i+1][c - 1 - j];
                                        mat_1[i+1][c - 1 - j] = temp;
                                      }
                                  }
                                }
                              }
                              printf("\n=========================================\n");
                              printf("[Matriz 1 reordenada com sucesso!]");
                              printf("\n-----------------------------------------");
                              vazio = 0;
                              for (i = 0; i < l; i++) {
                                for (j = 0; j < c; j++) {
                                  if (mat_1[i][j] != 0) {
                                    printf("\nPosição [%d][%d]: %d", i, j, mat_1[i][j]);
                                    vazio = 1;
                                  }
                                }
                              }
                              if (vazio == 0)
                                printf("\n[Matriz vazia!]");
                              printf("\n=========================================\n");
                            }
                              
                              else if (aux == 2) { // Reordenar matriz 2 em ordem decrescente
                                for (k = 0; k < l*c; k++) {
                                  for (i = 0; i < l; i++) { 
                                    for (j = 0; j < c; j++) {
                                      if (j + 1 != c && mat_2[i][j] < mat_2[i][j+1]) {
                                        temp = mat_2[i][j];
                                        mat_2[i][j] = mat_2[i][j+1];
                                        mat_2[i][j+1] = temp;
                                      }
                                        else if (i + 1 != l && mat_2[i][j] < mat_2[i+1][c - 1 - j]) {
                                          temp = mat_2[i][j];
                                          mat_2[i][j] = mat_2[i+1][c - 1 - j];
                                          mat_2[i+1][c - 1 - j] = temp;
                                        }
                                    }
                                  }
                                }
                                printf("\n=========================================\n");
                                printf("[Matriz 2 reordenada com sucesso!]");
                                printf("\n-----------------------------------------");
                                vazio = 0;
                                for (i = 0; i < l; i++) {
                                  for (j = 0; j < c; j++) {
                                    if (mat_2[i][j] != 0) {
                                      printf("\nPosição [%d][%d]: %d", i, j, mat_2[i][j]);
                                      vazio = 1;
                                    }
                                  }
                                }
                                if (vazio == 0)
                                  printf("\n[Matriz vazia!]");
                                printf("\n=========================================\n");
                              }
                      }           
              }
  } while (loop_m);
  return 0;
}